{
    "summary": "The code imports modules, defines classes for queries and prompts, generates data processing prompts, assembles questions and answers, creates a formatted document, and handles chat history. Else block generates chat history summary and condense prompts with new user question and context.",
    "details": [
        {
            "comment": "This code imports necessary modules, defines classes for reader questions and context queries, generates prompts for generating file summary context queries, parses raw data into objects, appends context-question pairs to a list, generates prompts for file summary and file questions, and finally prints the reader's questions.",
            "location": "\"/media/root/Toshiba XG3/works/prometheous_doc/src/document_agi_computer_control/vectorstore_embedding_chat_rag/main.py\":0-51",
            "content": "import sys, os\nsys.path.append(os.path.dirname(__file__))\nimport prompts as P\nimport vectorindex as V\nfrom pydantic import BaseModel\nclass ReaderQuestions(BaseModel):\n    questions: list[str]\nclass ContextQueries(BaseModel):\n    queries: list[str]\nprompt = P.generateFileSummaryContextQueriesPrompt(\n    schema, contentType, projectName, filePath, summary\n)\nres = ...\ncontextQueries = ContextQueries.parse_raw(res)\ncontextQAPairs = []\nfor q in contextQueries:\n    context = ...\n    contextQAPairs.append((q, context))\nprompt = P.generateFileSummaryPrompt(\n    contentType, projectName, filePath, summary, contextQAPairs\n)\ndocumentSummary = ...  # file summary\nprompt = P.generateFileQuestionsPrompt(\n    schema, contentType, projectName, filePath, summary\n)\nres = ...\nquestions = ReaderQuestions.parse_raw(res)\nprint(questions)\nQAPairs = []\nfor q in questions:\n    context = ...\n    prompt = P.generateFileAnswerPrompt(\n        contentType,\n        projectNAme,\n        filePath,\n        summary,\n        q,\n        context,\n    )\n    res = ..."
        },
        {
            "comment": "The code assembles questions and answers into pairs, creates a document with the formatted questions and answers, generates a prompt for a folder summary context queries, and then generates prompts for QA and recent chat history. If there is no last chat history, it assigns the recent chat history to the current one.",
            "location": "\"/media/root/Toshiba XG3/works/prometheous_doc/src/document_agi_computer_control/vectorstore_embedding_chat_rag/main.py\":52-97",
            "content": "    # assemble questions and answers.\n    QAPairs.append(q, res)\n# assemble document\ndocumentQA = [\"## Questions:\\n\"] + [\n    f\"{i+1}. {q}\\n\\n{a}\\n\" for i, (q, a) in enumerate(QAPairs)\n]\ndocumentQA = \"\\n\".join(documentQA)\ndocument = f\"{documentSummary}\\n---\\n{documentQA}\"\n################################\nprompt = P.generateFolderSummaryContextQueriesPrompt(\n    schema,\n    contextType,\n    projectName,\n    folderPath,\n    summary,\n)\nres = ...\nqueries = ContextQueries.parse_raw(res)\ncontextQAPairs = []\nfor q in queries:\n    context = ...\n    contextQAPairs.append((q, context))\nprompt = P.generateFolderSummaryPrompt(\n    contentType, projectName, filePath, summary, contextQAPairs\n)\ndocument = ...\n################################\nlast_chat_history = None\ncontext = ...  # generate from first question\nprompt = P.generateQAPrompt(contentType, projectName, question, context)\nres = ...\nprompt = P.generateRecentChatHistorySummaryPrompts(question, res)\nrecent_chat_history = ...\nif last_chat_history is None:\n    chat_history = recent_chat_history"
        },
        {
            "comment": "Else block generates a chat history summary prompt and updates last_chat_history. It then generates a condense prompt using the updated chat_history and a new user question, while also creating standalone_question and context.",
            "location": "\"/media/root/Toshiba XG3/works/prometheous_doc/src/document_agi_computer_control/vectorstore_embedding_chat_rag/main.py\":98-107",
            "content": "else:\n    prompt = P.generateChatHistorySummaryPrompt(last_chat_history, recent_chat_history)\n    chat_history = ...\nlast_chat_history = chat_history\nquestion = ...  # new question from user\nprompt = P.generateCondensePrompt(chat_history, question)\nstandalone_question = ...\ncontext = ..."
        }
    ]
}