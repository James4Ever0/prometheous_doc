{
    "summary": "This code generates a shell script for visualizing ignored files using Jinja2, argparse, and beartype. It creates a temporary directory, generates JSON data on selected and unselected files/directories, then writes the script to a file and runs it. The script uses subprocess to run display_tree_structure.py with appropriate arguments.",
    "details": [
        {
            "comment": "This code utilizes the Jinja2 template engine to generate a shell script for visualizing ignored files. It uses the argparse library to handle command-line arguments, and the tempfile module creates a temporary directory to store the generated script. The beartype library is used for type hinting. The script generates a JSON file containing the tree structure of selected and unselected files and directories, then counts their sizes and renders the JSON. Finally, it creates and writes the shell script to a temporary file within the created directory.",
            "location": "\"/media/root/Toshiba XG3/works/prometheous_doc/src/document_agi_computer_control/visual_file_selector_by_ignore_rules/run_simple.py\":0-38",
            "content": "from tempfile import TemporaryDirectory\nfrom jinja2 import Template\nfrom argparse import ArgumentParser\nfrom beartype import beartype\nimport os\nimport subprocess\nscript_template_str = \"\"\"\ncd \"{{diffpath}}\"\nfd --no-ignore --hidden | tree --fromfile -J > \"{{tempdir}}/all_tree.json\"\nfd | tree --fromfile -J > \"{{tempdir}}/selected_tree.json\"\n\"\"\"\n# tree output in json\n# load tree json, set selected & unselected properties\n# count file size\n# render tree json\nscript_template = Template(script_template_str)\nRELATIVE_TEMP_DIR_SCRIPT_PATH = \"script.sh\"\ndef parse_args():\n    parser = ArgumentParser()\n    parser.add_argument(\"-d\", \"--diffpath\", help=\"Path to visualize ignored files\")\n    args = parser.parse_args()\n    return args.diffpath\n@beartype\ndef render_script_template(diffpath: str, tempdir: str) -> str:\n    return script_template.render(diffpath=diffpath, tempdir=tempdir)\nwith TemporaryDirectory() as tempdir:\n    diffpath = parse_args()\n    script_str = render_script_template(diffpath, tempdir)\n    with open(os.path.join(tempdir, RELATIVE_TEMP_DIR_SCRIPT_PATH), \"w\") as f:"
        },
        {
            "comment": "Writes script to file, runs a bash script in tempdir, then uses subprocess to run display_tree_structure.py with full tree and selected tree paths, and base path as arguments.",
            "location": "\"/media/root/Toshiba XG3/works/prometheous_doc/src/document_agi_computer_control/visual_file_selector_by_ignore_rules/run_simple.py\":39-55",
            "content": "        f.write(script_str)\n    subprocess.run([\"bash\", os.path.join(tempdir, RELATIVE_TEMP_DIR_SCRIPT_PATH)])\n    full = f\"{tempdir}/all_tree.json\"\n    selected = f\"{tempdir}/selected_tree.json\"\n    basepath = os.path.abspath(diffpath)\n    subprocess.run(\n        [\n            \"python3.9\",\n            \"display_tree_structure.py\",\n            \"--full\",\n            full,\n            \"--selected\",\n            selected,\n            \"--basepath\",\n            basepath,\n        ]\n    )"
        }
    ]
}