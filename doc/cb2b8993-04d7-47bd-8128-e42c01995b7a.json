{
    "summary": "The code validates source directory, extracts repository data, and generates URLs for each file, rendering a template with a datalist and writing output to a file.",
    "details": [
        {
            "comment": "The code is parsing command line arguments, validating the source directory's existence and type, extracting repository information, setting up a Jinja2 template, loading metadata from JSON, and generating URL lines for each file in the directory.",
            "location": "\"/media/root/Toshiba XG3/works/prometheous_doc/src/document_agi_computer_control/sitemap_generator/main.py\":0-34",
            "content": "import os\nimport argparse\nparser = argparse.ArgumentParser()\nparser.add_argument(\"-s\", \"--source_dir\", type=str, required=True)\nargs = parser.parse_args()\n# the only parameter.\nsource_dir = args.source_dir\nassert os.path.exists(source_dir)\nassert os.path.isdir(source_dir)\nassert os.path.isabs(source_dir)\nrepo_name = os.path.split(source_dir)[1]\nif repo_name == \"docs\":\n    repo_name = os.path.split(os.path.dirname(source_dir))[1]\ntemplate_path = os.path.join(os.path.dirname(__file__), \"sitemap.xml.j2\")\n# template_path = \"sitemap_template.html.j2\"\noutput_file_path = os.path.join(source_dir,\"sitemap.xml\")\nbase_url = f\"https://james4ever0.github.io/{repo_name}\"\nfrom jinja2 import Template\ntemplate = Template(open(template_path, \"r\").read())\nimport json\nmetadata = json.loads(open(os.path.join(source_dir, \"metadata.json\"), \"r\").read())\nfile_mapping = metadata[\"file_mapping\"]\n# split_count = metadata[\"split_count\"]\n# project_name = metadata[\"project_name\"]\nimport urllib.parse\nlines = [\n    f\"{base_url}?q={urllib.parse.quote(comp['filepath'])}\" for comp in file_mapping.values()"
        },
        {
            "comment": "Appends tree.html URL, generates datalist with items, renders template with datalist, writes rendered output to file, and prints success message.",
            "location": "\"/media/root/Toshiba XG3/works/prometheous_doc/src/document_agi_computer_control/sitemap_generator/main.py\":35-47",
            "content": "]\nlines.append(f\"{base_url}/tree.html?full=true\")\n# Data to be rendered\ndatalist = [(item, \"2023-12-28T09:21:02+00:00\", \"1.00\") for item in lines]\n# Render the template with the data\nrendered_template = template.render(datalist=datalist)\n# Write the rendered output to a file\nwith open(output_file_path, \"w\") as output_file:\n    output_file.write(rendered_template)\nprint(\"Template rendered and written to file successfully.\")"
        }
    ]
}