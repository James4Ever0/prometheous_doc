{
    "summary": "The code defines a function `parse_arguments()` using the `argparse` module, expecting three arguments with an assertion on the `code_dir_path` being absolute. It then parses these arguments, loads a template file, generates HTML documents from the template at specified output paths, and writes these generated HTML documents to the output paths. Additionally, JSON data is loaded, summaries are extracted, and a dictionary of titles is created.",
    "details": [
        {
            "comment": "This code defines a function `parse_arguments()` that parses command-line arguments using the `argparse` module. It expects three arguments: `-f/--file`, `-d/--document`, and `-o/--output`. The function asserts that the provided `code_dir_path` is an absolute path.",
            "location": "\"/media/root/Toshiba XG3/works/prometheous_doc/src/document_agi_computer_control/build_website.py\":0-36",
            "content": "import argparse\nimport json\nimport os\nfrom beartype import beartype\nfrom jinja2 import Template\n# it is better structured like:\n# db: shared, unified mapping between filename, document json name (uuid) and document summary\n# search results again in selected documents, from entry level\n# search results in selected folder (you may click different part of the filepath to jump)\n# search results in detail of each document file (if clicked in)\n# or, just build a unified search index out of the entire repo.\ndef parse_arguments():\n    parser = argparse.ArgumentParser()\n    parser.add_argument(\n        \"-f\",\n        \"--file\",\n        help=\"directory of code to process\",\n    )\n    parser.add_argument(\n        \"-d\",\n        \"--document\",\n        help=\"directory of document json to read\",\n    )\n    parser.add_argument(\"-o\", \"--output\", help=\"document output path\", default=\"\")\n    args = parser.parse_args()\n    code_dir_path = args.file\n    json_path = args.document\n    output_path = args.output\n    assert os.path.isabs(code_dir_path)"
        },
        {
            "comment": "This code is parsing arguments, loading a template file, and generating HTML documents from the template using provided data. The HTML documents are then written to specified output paths.",
            "location": "\"/media/root/Toshiba XG3/works/prometheous_doc/src/document_agi_computer_control/build_website.py\":37-77",
            "content": "    assert os.path.isabs(json_path)\n    assert os.path.isdir(code_dir_path)\n    assert os.path.isdir(json_path)\n    return output_path, code_dir_path, json_path\n@beartype\ndef generate_html_document(template: Template, data: dict):\n    html = template.render(**data)\n    return html\n@beartype\ndef load_template(template_path: str):\n    with open(template_path, \"r\") as f:\n        content = f.read()\n    template = Template(content)\n    return template\n@beartype\ndef generate_and_write_document(template: Template, data: dict, html_output_path: str):\n    content = generate_html_document(template, data)\n    with open(html_output_path, \"w+\") as f:\n        f.write(content)\nif __name__ == \"__main__\":\n    output_path, code_dir_path, json_path = parse_arguments()\n    template_path = \"website_template.html.j2\"\n    template = load_template(template_path)\n    datalist = []\n    html_output_path = os.path.join(output_path, \"index.html\")\n    for fpath in os.listdir(json_path):\n        json_abspath = os.path.join(json_path, fpath)\n        with open(json_abspath, \"r\") as f:"
        },
        {
            "comment": "Loading JSON data, extracting summary and creating a dictionary of titles.",
            "location": "\"/media/root/Toshiba XG3/works/prometheous_doc/src/document_agi_computer_control/build_website.py\":78-85",
            "content": "            data = json.load(\n                f\n            )  # {\"summary\": summary, \"details\": [{\"comment\": comment, \"location\": location, \"content\": content}, ...]}\n            summary = data[\"summary\"]\n            datalist.append(dict(title=summary))\n    datadict = {index: content for index, content in enumerate(datalist)}\n    template_data = dict(datadict=datadict)\n    generate_and_write_document(template, template_data, html_output_path)"
        }
    ]
}